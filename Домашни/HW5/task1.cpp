#include <iostream>
using namespace std;
// Максимална дължина на масива
const size_t MAX_SIZE = 1000;
// Ще подам Н по референция,защото искам да променя стойността в паметта,
// а не неговото копие,при диференциране нямаме нужда от нули в масива
// след свършена работа в главната функция ще имаме всички стойности != 0;
void findDerivation(double arr[], unsigned& N,int pow)
{
	// докато броят диференцирания е различен от 0
	while (pow)
	{
		// temp ще ми помага за диференцирането на всички стойности 
		// за всяка една врътка,подигурил съм се,че тя ще бъде < 1000
		unsigned temp = N;
		for (int i = 0; i <= N; i++)
		{
			// умножавам и свалям степента за следващото число на масива
			arr[i] *= temp;
			temp--;
		}
		//вече сме извършили едно диференциране и сваляме брояча
		pow--;
		// при всяка една врътка получаваме последен елемент 0,затова го махаме
		N--;
	}
}
void printArr(double arr[],unsigned N,int temp)
{
	for (int i = 0; i <= N; i++)
	{
		// форматираме всяко едно число според случаите
		if (temp > 1)
			cout << arr[i] << "*x^" << temp << " + ";
		else if (temp == 1)
			cout << arr[i] << "*x + ";
		else
			cout << arr[i];
		temp--;
	}
}
int main()
{
	// колко от коефициентите ще ползваме и брой диференцирания
	unsigned N,pow;
	// масив с максимална дължина 1000 и коефициенти от тип дабъл,
	// защото в задачата се иска коефициентите да са реални числа
	double arr[MAX_SIZE];
	// ограничения
	do
	{
		cin >> N;
	} while (N >= MAX_SIZE || N == 0);
	for (int i = 0; i <= N; i++)
	{
		cin >> arr[i];
	}
	cin >> pow;
	// правя си променлива,която ще ми помага с печатането на х-овете
	// в края на задачата
	int temp = N - pow;
	// функцийка,която ще извърши pow на брой диференцирания
	findDerivation(arr, N,pow);
	// функцийка за принтене на елементите
	printArr(arr, N, temp);
	return 0;
}
